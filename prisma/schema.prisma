// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Country {
    id          String @id @default(cuid())
    code        String @unique // US, TN, GB, etc.
    name        String // "United States", "Tunisia", "United Kingdom"
    flagUrl     String
    dialCode    String
    phoneFormat String // "+1 (###) ###-####"

    Address Address[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("countries")
}

model Address {
    id         String @id @default(cuid())
    street     String
    city       String
    state      String
    postalCode String
    countryId  String

    // Relationships
    country Country @relation(fields: [countryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    User     User[]
    Business Business[]

    @@map("addresses")
}

model Currency {
    id     String @id @default(cuid())
    code   String @unique // USD, EUR, GBP, TND
    name   String // "US Dollar", "Euro"
    symbol String // "$", "â‚¬"

    Account  Account[]
    Business Business[]

    @@map("currencies")
}

model Business {
    id       String           @id @default(cuid())
    name     String           @unique
    industry BusinessIndustry

    address   Address @relation(fields: [addressId], references: [id])
    addressId String

    currency   Currency @relation(fields: [currencyId], references: [id])
    currencyId String

    user     User[]
    accounts Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("businesses")
}

enum BusinessIndustry {
    INDIVIDUAL // For individual users
    FINANCE
    TECHNOLOGY
    HEALTHCARE
    EDUCATION
    RETAIL
    MANUFACTURING
    REAL_ESTATE
    HOSPITALITY
    TRANSPORTATION
    OTHER
}

model User {
    id                String   @id @default(cuid())
    firstName         String
    lastName          String
    email             String   @unique
    password          String
    salt              String
    profilePhotoUrl   String?
    address           Address  @relation(fields: [addressId], references: [id])
    addressId         String
    phoneNumber       String
    dwollaCustomerUrl String
    dwollaCustomerId  String
    ssn               String // Social Security Number (CIN for Tunisia)
    dateOfBirth       DateTime

    roleId     String
    businessId String

    business Business @relation(fields: [businessId], references: [id])
    role     UserRole @relation(fields: [roleId], references: [id], name: "UserToRole")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([businessId])
    @@index([email])
    @@map("users")
}

model UserRole {
    id          String             @id @default(cuid())
    roleType    RoleType           @unique
    permissions PermissionOnRole[]
    users       User[]             @relation("UserToRole")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user_roles")
}

model PermissionOnRole {
    id         String     @id @default(cuid())
    permission Permission
    roleId     String?
    role       UserRole?  @relation(fields: [roleId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([permission, roleId], name: "permission_role_unique")
    @@map("permission_on_role")
}

enum RoleType {
    ADMIN
    OWNER
    ACCOUNTANT
    MEMBER
    GUEST
}

enum Permission {
    VIEW_TRANSACTIONS
    CREATE_TRANSACTIONS
    EDIT_TRANSACTIONS
    DELETE_TRANSACTIONS
    EXPORT_REPORTS
    MANAGE_USERS
    MANAGE_BUDGETS
}

enum AccountSource {
    PLAID
    MANUAL
}

model Account {
    id         String   @id @default(cuid())
    name       String
    currencyId String
    currency   Currency @relation(fields: [currencyId], references: [id])

    source      AccountSource @default(MANUAL)
    isActive    Boolean       @default(true)
    shareableId String        @unique

    // For manual accounts
    accountType AccountType?

    // Fields for Plaid accounts
    plaidId          String? @unique
    officialName     String?
    mask             String?
    type             String?
    subtype          String?
    availableBalance Int     @default(0)
    currentBalance   Int     @default(0)
    fundingSourceUrl String?

    // Relationships
    businessId   String
    business     Business      @relation(fields: [businessId], references: [id])
    transactions Transaction[]
    bank         Bank          @relation(fields: [bankId], references: [id])
    bankId       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, businessId])
    @@index([businessId])
    @@index([source])
    @@map("accounts")
}

model Category {
    id   String @id @default(cuid())
    name String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    Transaction Transaction[]

    @@map("categories")
}

model Bank {
    id   String @id @default(cuid())
    name String
    code String @unique

    source BankSource @default(MANUAL)

    // Plaid specific fields
    institutionId   String?
    institutionType String? // "bank", "credit_union", etc.
    institutionName String?
    institutionLogo String?
    plaidId         String? @unique

    accounts Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("banks")
}

enum AccountType {
    CREDIT_CARD
    BANK_ACCOUNT
}

enum BankSource {
    PLAID
    MANUAL
}

model Transaction {
    id             String   @id @default(cuid())
    name           String
    amount         Int
    payee          String
    date           DateTime
    paymentChannel String?
    pending        Boolean?
    image          String?
    notes          String?

    account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId String

    category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    categoryId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, date, accountId, amount], name: "transaction_unique")
    @@index([accountId, date])
    @@index([date])
    @@map("transactions")
}
