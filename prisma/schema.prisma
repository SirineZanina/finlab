// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Business {
    id       String           @id @default(cuid())
    name     String           @unique
    industry BusinessIndustry
    user     User[]

    accounts Account[]
    category Category[]
    banks    Bank[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("businesses")
}

enum BusinessIndustry {
    FINANCE
    TECHNOLOGY
    HEALTHCARE
    EDUCATION
    RETAIL
    MANUFACTURING
    REAL_ESTATE
    HOSPITALITY
    TRANSPORTATION
    OTHER
}

model User {
    id                String  @id @default(cuid())
    firstName         String
    lastName          String
    email             String  @unique
    password          String
    salt              String
    profilePhotoUrl   String?
    country           String
    phoneNumber       String
    roleId            String
    businessId        String
    dwollaCustomerUrl String
    dwollaCustomerId  String

    business Business @relation(fields: [businessId], references: [id])

    role UserRole @relation(fields: [roleId], references: [id], name: "UserToRole")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model UserRole {
    id          String             @id @default(cuid())
    roleType    RoleType           @unique
    permissions PermissionOnRole[]
    users       User[]             @relation("UserToRole")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user_roles")
}

model PermissionOnRole {
    id         String     @id @default(cuid())
    permission Permission
    roleId     String?
    role       UserRole?  @relation(fields: [roleId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([permission, roleId], name: "permission_role_unique")
    @@map("permission_on_role")
}

enum RoleType {
    ADMIN
    OWNER
    ACCOUNTANT
    MEMBER
    GUEST
}

enum Permission {
    VIEW_TRANSACTIONS
    CREATE_TRANSACTIONS
    EDIT_TRANSACTIONS
    DELETE_TRANSACTIONS
    EXPORT_REPORTS
    MANAGE_USERS
    MANAGE_BUDGETS
}

model Account {
    id           String        @id @default(cuid())
    name         String
    businessId   String
    business     Business      @relation(fields: [businessId], references: [id])
    transactions Transaction[]
    bank         Bank?         @relation(fields: [bankId], references: [id])
    bankId       String?
    plaidId      String?       @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("accounts")
}

model Category {
    id         String   @id @default(cuid())
    name       String
    plaidId    String?
    business   Business @relation(fields: [businessId], references: [id])
    businessId String

    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Transaction Transaction[]

    @@map("categories")
}

// model PlaidAccount {
//     id               String        @id @default(cuid())
//     name             String
//     availableBalance Float
//     currentBalance   Float
//     officialName     String
//     mask             String
//     institutionId    String
//     type             String
//     subtype          String
//     shareableId      String        @unique
//     businessId       String
//     business         Business      @relation(fields: [businessId], references: [id])
//     transactions     Transaction[]
//     bank             Bank          @relation(fields: [bankId], references: [id])
//     bankId           String
//     plaidId          String        @unique

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@unique([plaidId, businessId], name: "plaid_business_unique")
//     @@map("plaid_accounts")
// }

enum AccountType {
    DEPOSITORY
    CREDIT
    LOAN
    INVESTMENT
    OTHER
}

model Transaction {
    id             String    @id @default(cuid())
    name           String
    amount         Int
    payee          String
    date           DateTime // A seperate date field for the user to manually add a transaction
    paymentChannel String?
    pending        Boolean?
    image          String?
    notes          String?
    account        Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId      String
    category       Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    categoryId     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name, createdAt, accountId], name: "transaction_unique")
    @@map("transactions")
}

model Bank {
    id               String    @id @default(cuid())
    userId           String
    businessId       String
    business         Business  @relation(fields: [businessId], references: [id])
    plaidId          String
    plaidBankId      String
    accessToken      String
    fundingSourceUrl String
    shareableId      String    @unique
    accounts         Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("banks")
}
